/*
---------------------------------------------------------------------------------
-----------------------       C V S - I n f o    --------------------------------
---------------------------------------------------------------------------------
Info : $Id: EpromUtils.java,v 1.5 2010/05/14 10:02:34 cvs Exp $
Log  : $Log: EpromUtils.java,v $
Log  : Revision 1.5  2010/05/14 10:02:34  cvs
Log  : Stand 14.05.10
Log  :
Log  : Revision 1.4  2010/05/13 11:56:02  cvs
Log  : Images hinzu
Log  :
Log  : Revision 1.3  2010/04/03 14:38:42  cvs
Log  : Stand 03.04.2010
Log  :
Log  : Revision 1.2  2010/03/26 21:54:19  cvs
Log  : 26.03.2010
Log  :
Log  :
---------------------------------------------------------------------------------
-----------------------       C V S - I n f o    --------------------------------
---------------------------------------------------------------------------------
 *
 * 
 * From http://www.rgagnon.com/javadetails/java-0596.html
 */
package com.utils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class EpromUtils {

    static final byte[] HEX_CHAR_TABLE = {
        (byte) '0', (byte) '1', (byte) '2', (byte) '3',
        (byte) '4', (byte) '5', (byte) '6', (byte) '7',
        (byte) '8', (byte) '9', (byte) 'a', (byte) 'b',
        (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f'
    };
    public byte[] prom = new byte[128];

    /**
     *
     * @param raw
     * @return Hex-String
     * @throws UnsupportedEncodingException
     */
    public String getHexString(byte[] raw) throws UnsupportedEncodingException {
        byte[] hex = new byte[2 * raw.length];
        int index = 0;

        for (byte b : raw) {
            int v = b & 0xFF;
            hex[index++] = HEX_CHAR_TABLE[v >>> 4];
            hex[index++] = HEX_CHAR_TABLE[v & 0xF];
        }

        return new String(hex, "ASCII");
    }

    /**
     *
     * @param raw
     * @return Hex-String
     * @throws UnsupportedEncodingException
     */
    public String getHexStringByte(byte raw) throws UnsupportedEncodingException {
        byte[] hex = new byte[2];
        int index = 0;

        //for (byte b : raw) {
        int v = raw & 0xFF;
        hex[index++] = HEX_CHAR_TABLE[v >>> 4];
        hex[index++] = HEX_CHAR_TABLE[v & 0xF];
        //}

        return new String(hex, "ASCII");
    }

    /**
     * Init the prom Array
     * @param promSize
     */
    public void initProm(int promSize) {
        prom = new byte[promSize];
        for (int i = 0; i < promSize; i++) {
            prom[i] = (byte) 255;
        } //init with 0xFF
    }

    /**
     * Read file into prom buffer
     * @param f
     * @param n Filesize
     */
    public void readFile(String f, long n) {
        BufferedInputStream in = null;
        int bufLen = 0;
        if (n > prom.length) {
            bufLen = prom.length;
        } else {
            bufLen = (int) n;
        }
        try {
            in = new BufferedInputStream(new FileInputStream(f));
            in.read(prom, 0, bufLen);
            in.close();
        } catch (IOException ex) {
            System.err.println("Error=" + ex);

        }
    }

    /**
     *
     * @param filename
     */
    public void saveFile(String filename) {
      BufferedOutputStream out = null;
        try {
            out = new BufferedOutputStream(new FileOutputStream(filename));
            try {
                out.write(prom, 0, prom.length);
                out.flush();
                out.close();
            } catch (IOException ex) {
                System.out.println("Error=" + ex);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Error=" + ex);
        }
    }

    private String asciiToHex(String ascii) {
        StringBuilder hex = new StringBuilder();

        for (int i = 0; i < ascii.length(); i++) {
            System.out.println("i=" + i + " Val" + ascii.charAt(i));
            hex.append(Integer.toHexString(ascii.charAt(i)));
        }

        System.out.println("Value of ascii " + ascii + ": " + hex.toString());

        return hex.toString();
    }
}
