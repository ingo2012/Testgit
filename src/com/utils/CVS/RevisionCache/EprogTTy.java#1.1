/*
 * EprogTTy.java the Serial-Class for Eprog
 *
 * Created on 18.05.2010, 20:00:24
 *

---------------------------------------------------------------------------------
-----------------------       C V S - I n f o    --------------------------------
---------------------------------------------------------------------------------
 Info : $Id: EprogTTy.java,v 1.1 2010/05/19 17:04:05 cvs Exp $
 Log  : $Log: EprogTTy.java,v $
 Log  : Revision 1.1  2010/05/19 17:04:05  cvs
 Log  : Stand 19.05.10
 Log  :
 Log  : Revision 1.7  2010/05/18 18:05:22  cvs
 Log  : Stand 18.05.10
 Log  :
---------------------------------------------------------------------------------
-----------------------       C V S - I n f o    --------------------------------
---------------------------------------------------------------------------------
 *
 */

package com.utils;

/* now,  we use the rxtx Libs
import javax.comm.CommPortIdentifier;
import javax.comm.NoSuchPortException;
import javax.comm.PortInUseException;
import javax.comm.SerialPort;
import javax.comm.SerialPortEvent;
import javax.comm.SerialPortEventListener;
*/

import gnu.io.*;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.TooManyListenersException;
import javax.swing.JProgressBar;

/**
 *
 * @author egerlai
 */
public class EprogTTy implements Runnable, SerialPortEventListener {

    private Logging log;

    Thread readThread;
    public OutputStream outputStream;
    public InputStream inputStream;
    private JProgressBar progBar;
    private String Port                    = "/dev/ttyUSB1";
    public SerialPort serialPort           = null;
    public String readStatus               = "";
    public boolean ttyFound                = false;
    public boolean isCancel                = false;
    public boolean isBlankTest             = false;
    private int progBarVal                 = 0;


    /**
     *
     * @param EprogPort
     * @param progBar
     * @param log
     */
    public EprogTTy(String EprogPort,JProgressBar progBar,Logging log) {
        this.Port    = EprogPort;
        this.log     = log;
        this.progBar = progBar;
        initEprog(Port);
    }

     /**
     * Initialize the Port
     * @param tty The Port
     */
    private void initEprog(String tty) {
       CommPortIdentifier portId = null;

        try {
            portId = CommPortIdentifier.getPortIdentifier(tty);
            log.info("Opening port " + portId.getName());
            try {
                serialPort = (SerialPort) portId.open("EprogTTy", 2000);
            } catch (PortInUseException e) {
                log.error("Port in use.");
            }

            try {
                outputStream = serialPort.getOutputStream();
            } catch (IOException e) {
                log.error("IOExeption " + e);
            }

            try {
                serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1 , SerialPort.PARITY_NONE );
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN);
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_OUT);
            } catch (gnu.io.UnsupportedCommOperationException ex) {
                log.error("UnsupportedCommOperationException :" + ex);
            }

            try {
                serialPort.notifyOnOutputEmpty(false);  // muss bei javaxcom auf true
                serialPort.notifyOnCTS(true);
                serialPort.notifyOnDataAvailable(true);
                serialPort.notifyOnParityError(true);
                serialPort.notifyOnDSR(true);
            } catch (Exception e) {
                System.out.println("Error setting event notification"+e);
            }

            try {
                inputStream = serialPort.getInputStream();
            } catch (IOException e) {
                log.error("IOExeption " + e);
            }

            try {
                serialPort.addEventListener((SerialPortEventListener) this);
            } catch (TooManyListenersException e) {
                log.error("TooManyListenersException " + e);
            }

            serialPort.notifyOnDataAvailable(true);
            readThread = new Thread(this);
            readThread.start();
            ttyFound = true;

        } catch (NoSuchPortException ex) {
            log.error("Port " + tty + " not found !");
        }
    }

    public void run() {
	try {
	    Thread.sleep(2000);
	} catch (InterruptedException e) {}
    }

    /**
     * SerialEvent
     * @param event
     */
    public void serialEvent(SerialPortEvent event) {
        int numBytes = 0;
        String result = "";

        if (isCancel == false) {

            switch (event.getEventType()) {

                case SerialPortEvent.BI:
                    log.debug("BI Event");
                    break;

                case SerialPortEvent.OE:
                    log.debug("OE Event");
                    break;

                case SerialPortEvent.FE:
                    log.debug("FE Event");
                    break;

                case SerialPortEvent.PE:
                    log.debug("PE Event");
                    break;

                case SerialPortEvent.CD:
                    log.debug("CD Event");
                    break;

                case SerialPortEvent.CTS:
                    progBarVal = progBarVal +8;
                    if(progBarVal>100) { progBarVal =100;}
                    progBar.setValue(progBarVal);
                    log.debug("CTS Event");
                    //log.debug("lenkplStr="+kplStr.length());
                    break;

                case SerialPortEvent.DSR:
                    log.debug("DSR Event");
                    break;

                case SerialPortEvent.RI:
                    log.debug("RI Event");
                    break;

                case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
                    log.debug("OutputBufferEmpty Event");
                    break;

                case SerialPortEvent.DATA_AVAILABLE:
                    log.debug("DATA_AVAILABLE Event");
                    byte[] readBuffer = new byte[60];

                    try {

                        while (inputStream.available() > 0) {
                            numBytes = inputStream.read(readBuffer);
                        }

                        result = new String(readBuffer,0,numBytes);
                        log.debug("NumBytes=" + numBytes + " result=" + result);


                        if(isBlankTest && (numBytes>0)) {
                          isBlankTest = false; // we read only the first byte !
                          log.debug("isBlankTest is set to false");
                          readStatus = new String(readBuffer,0,1);
                          log.debug("readStatus=" + readStatus);
                        }


                    } catch (IOException e) {
                    }

                    break;
            }
        }
    }

    /**
     * Write String to the Eprommer
     * @param s
     */
    public void writeString(String s) {
        try {
              log.debug("writeString="+s);
              if(serialPort.isCTS()) outputStream.write(s.getBytes());
	    } catch (IOException e) {
                log.error("Error writing "+e);
              }
	try {
	      Thread.sleep(500);  // Be sure data is xferred
	    } catch (Exception e) {
               log.error("Exeption "+e);
            }
    }

}
